generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model discussion {
  name                  String?                @db.VarChar(255)
  description           String?                @db.VarChar(255)
  active                Boolean?
  visibility            Int?
  id_discussion         Int                    @id
  fk_userid_user        Int
  discussion_visibility discussion_visibility? @relation(fields: [visibility], references: [id_discussion_visibility], onDelete: Restrict, onUpdate: Restrict, map: "discussion_ibfk_1")
  user                  user                   @relation(fields: [fk_userid_user], references: [id_user], onUpdate: Restrict, map: "discussion_ibfk_2")
  discussion_comment    discussion_comment[]

  @@index([fk_userid_user], map: "fk_userid_user")
  @@index([visibility], map: "visibility")
}

model discussion_comment {
  description                String?    @db.VarChar(255)
  creation_date              DateTime?  @db.Date
  id_discussion_comment      Int        @id
  fk_userid_user             Int
  fk_discussionid_discussion Int
  user                       user       @relation(fields: [fk_userid_user], references: [id_user], onUpdate: Restrict, map: "comments")
  discussion                 discussion @relation(fields: [fk_discussionid_discussion], references: [id_discussion], onUpdate: Restrict, map: "discussion_comment_ibfk_1")
  vote                       vote[]

  @@index([fk_userid_user], map: "comments")
  @@index([fk_discussionid_discussion], map: "fk_discussionid_discussion")
}

model discussion_visibility {
  id_discussion_visibility Int          @id
  name                     String       @db.Char(7)
  discussion               discussion[]
}

model project {
  name              String?   @db.VarChar(255)
  short_description String?   @db.VarChar(255)
  long_description  String?   @db.VarChar(255)
  repository        String?   @db.VarChar(255)
  logo              Bytes?    @db.Blob
  technology        String?   @db.VarChar(255)
  creation_date     DateTime? @db.Date
  last_updated      DateTime? @db.Date
  id_project        Int       @id
  user              user[]
}

model roles {
  id_roles Int    @id
  name     String @db.Char(13)
  user     user[]
}

model user {
  name                 String?              @db.VarChar(255)
  surname              String?              @db.VarChar(255)
  email                String?              @db.VarChar(255)
  password             String?              @db.VarChar(255)
  github               String?              @db.VarChar(255)
  banned_until         DateTime?            @db.Date
  role                 Int?
  id_user              Int                  @id
  fk_projectid_project Int
  discussion           discussion[]
  discussion_comment   discussion_comment[]
  project              project              @relation(fields: [fk_projectid_project], references: [id_project], onUpdate: Restrict, map: "controls")
  roles                roles?               @relation(fields: [role], references: [id_roles], onDelete: Restrict, onUpdate: Restrict, map: "user_ibfk_1")
  vote                 vote[]

  @@index([fk_projectid_project], map: "controls")
  @@index([role], map: "role")
}

model vote {
  is_positive                                Boolean?
  id_vote                                    Int                @id
  fk_discussion_commentid_discussion_comment Int
  fk_userid_user                             Int
  discussion_comment                         discussion_comment @relation(fields: [fk_discussion_commentid_discussion_comment], references: [id_discussion_comment], onUpdate: Restrict, map: "vote_ibfk_1")
  user                                       user               @relation(fields: [fk_userid_user], references: [id_user], onUpdate: Restrict, map: "votes")

  @@index([fk_discussion_commentid_discussion_comment], map: "fk_discussion_commentid_discussion_comment")
  @@index([fk_userid_user], map: "votes")
}
