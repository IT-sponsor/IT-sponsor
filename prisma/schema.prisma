generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                 Int             @id @default(autoincrement())
  first_name         String?         @db.VarChar(255)
  last_name          String?         @db.VarChar(255)
  email              String?         @unique @db.VarChar(255)
  password           String?         @db.VarChar(255)
  github             String?         @unique @db.VarChar(255)
  linkedin           String?         @unique @db.VarChar(255)
  phone_number       String?         @unique @db.VarChar(255)
  job_title          String?         @db.VarChar(255)
  about_me           String?         @db.VarChar(255)
  technologies       String?         @db.VarChar(255)
  experience         String?         @db.VarChar(255)
  education          String?         @db.VarChar(255)
  banned_until       DateTime?       @db.Date
  role               users_role?
  fk_imagesid_images Int?            @unique(map: "fk_imagesid_images")
  applies            applies[]
  controls           controls[]
  faults             faults[]
  gets_assigned      gets_assigned[]
  images             images?         @relation(fields: [fk_imagesid_images], references: [id_images], onDelete: Restrict, onUpdate: Restrict, map: "uploads")
}

model applies {
  fk_usersid  Int
  fk_issuesid Int
  users       users @relation(fields: [fk_usersid], references: [id], onUpdate: Restrict, map: "applies")

  @@id([fk_usersid, fk_issuesid])
}

model controls {
  fk_usersid    Int
  fk_projectsid Int
  users         users @relation(fields: [fk_usersid], references: [id], onUpdate: Restrict, map: "controls")

  @@id([fk_usersid, fk_projectsid])
}

model faults {
  id            Int              @id @default(autoincrement())
  title         String?          @db.VarChar(255)
  created_at    DateTime?        @db.Date
  description   String?          @db.VarChar(4000)
  severity      faults_severity?
  status        faults_status?
  fk_projectsid Int
  fk_usersid    Int
  projects      projects         @relation(fields: [fk_projectsid], references: [id], onUpdate: Restrict, map: "has3")
  users         users            @relation(fields: [fk_usersid], references: [id], onUpdate: Restrict, map: "reports")
  images        images[]

  @@index([fk_projectsid], map: "has3")
  @@index([fk_usersid], map: "reports")
}

model gets_assigned {
  fk_usersid  Int
  fk_issuesid Int
  users       users @relation(fields: [fk_usersid], references: [id], onUpdate: Restrict, map: "gets_assigned")

  @@id([fk_usersid, fk_issuesid])
}

model images {
  uploaded_at DateTime? @db.Date
  file_path   String?   @db.VarChar(255)
  image       Bytes?    @db.Blob
  id_images   Int       @id @default(autoincrement())
  fk_faultsid Int?
  fk_issuesid Int?
  faults      faults?   @relation(fields: [fk_faultsid], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "has2")
  projects    projects?
  users       users?

  @@index([fk_faultsid], map: "has2")
}

model issues {
  id            Int                @id @default(autoincrement())
  title         String?            @db.VarChar(255)
  description   String?            @db.VarChar(4000)
  status        issues_status?
  visibility    issues_visibility?
  fk_projectsid Int
  projects      projects           @relation(fields: [fk_projectsid], references: [id], onUpdate: Restrict, map: "has")

  @@index([fk_projectsid], map: "has")
}

model projects {
  id                  Int                           @id @default(autoincrement())
  name                String?                       @db.VarChar(255)
  short_description   String?                       @db.VarChar(255)
  long_description    String?                       @db.VarChar(4000)
  repository          String?                       @unique @db.VarChar(255)
  technologies        String?                       @db.VarChar(1000)
  created_at          DateTime?                     @db.Date
  updated_at          DateTime?                     @db.Date
  star_count          Int?
  contributor_count   Int?
  codebase_visibility projects_codebase_visibility?
  fk_imagesid_images  Int?                          @unique(map: "fk_imagesid_images")
  faults              faults[]
  issues              issues[]
  images              images?                       @relation(fields: [fk_imagesid_images], references: [id_images], onDelete: Restrict, onUpdate: Restrict, map: "has1")
}

enum issues_status {
  open
  closed
  draft
  in_progress
}

enum faults_severity {
  high
  medium
  low
}

enum issues_visibility {
  public
  private
}

enum faults_status {
  open
  closed
  draft
  in_progress
}

enum users_role {
  volunteer
  project_owner
  admin
}

enum projects_codebase_visibility {
  public
  private
}
